import pandas as pd
pd.options.mode.chained_assignment = None  # default='warn'
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
sns.set(style="whitegrid", color_codes=True)


#First, we import the three schemes respectively:
#import first sheet: SDG Goals
sdg = pd.read_excel('sdg.xlsx', header=None, encoding='latin', skip_blank_lines=False)
sdg.fillna(0, inplace=True)
sdg = sdg.where(sdg != "x", 1)
sdg = sdg.where(sdg != "X", 1)

#import second sheet: SDG Targets
target = pd.read_excel('Target.xlsx', header=None, encoding='latin', skip_blank_lines=False)
target.fillna(0, inplace=True)
target = target.where(target != "x", 1)
target = target.where(target != "X", 1)

#import third sheet: SDG Indicators
indicator = pd.read_excel('Indicator.xlsx', header=None, encoding='latin', skip_blank_lines=False)
indicator.fillna(0, inplace=True)
indicator = indicator.where(indicator != "x", 1)
indicator = indicator.where(indicator != "X", 1)

# SDG Goals and keywords: return and convert arrays to proper strings
import sys
reload(sys)
sys.setdefaultencoding('utf8')

keys = sdg.iloc[0,2:1316]
keys = keys.astype(str)
keys = keys.reset_index()
keys = keys.drop(['index'], axis=1)

goals = sdg.iloc[1:18,1]
goals = goals.astype(str)
goals = goals.reset_index()
goals = goals.drop(['index'], axis=1)

#save original arrays to pickles. (just to be safe)
# import pickle
# pickle_out = open("dict.pickleA","wb")
# pickle.dump(goals, pickle_out)
# pickle_out.close()
#
# pickle_out = open("dict.pickleB","wb")
# pickle.dump(keys, pickle_out)
# pickle_out.close()

#apply mapping function to obtain binary decision matrix whether keyword is part of SDG Goals
goals.columns = ['SDG']
res = []
for a in goals['SDG']:
    res.append(keys.applymap(lambda x: x in a))

sdg_mapped = pd.concat(res, axis=1).T
sdg_mapped.index = np.arange(len(sdg_mapped))
sdg_mapped = goals.join(sdg_mapped)

# SDG Target and keywords: return and convert arrays to proper strings
target_des = target.iloc[1:170,2]
target_des = target_des.astype(str)
target_des = target_des.reset_index()
target_des = target_des.drop(['index'], axis=1)

#apply mapping function to obtain binary decision matrix whether keyword is part of SDG Targets
target_des.columns = ['target']
res = []
for a in target_des['target']:
    res.append(keys.applymap(lambda x: x in a))

target_mapped = pd.concat(res, axis=1).T
target_mapped.index = np.arange(len(target_mapped))
target_mapped = target_des.join(target_mapped)

# SDG Indicator and keywords: return and convert arrays to proper strings
indicator_des = indicator.iloc[1:245,3]
indicator_des = indicator_des.astype(str)
indicator_des = indicator_des.reset_index()
indicator_des = indicator_des.drop(['index'], axis=1)

#apply mapping function to obtain binary decision matrix whether keyword is part of SDG Indicators
indicator_des.columns = ['indicator']
res = []
for a in indicator_des['indicator']:
    res.append(keys.applymap(lambda x: x in a))

indicator_mapped = pd.concat(res, axis=1).T
indicator_mapped.index = np.arange(len(indicator_mapped))
indicator_mapped = indicator_des.join(indicator_mapped)

#calculate Hit rate as share of True out of False
false = sdg_mapped[sdg_mapped==False].count()
true = sdg_mapped[sdg_mapped==True].count()
SDG_Goals_Hit_rate = true.sum()/float(false.sum())
print "hit rate SDG_goals: 0.4%"
print SDG_Goals_Hit_rate

false = target_mapped[target_mapped==False].count()
true = target_mapped[target_mapped==True].count()
SDG_Targets_Hit_rate = true.sum()/float(false.sum())
print "hit rate SDG_Targets: 0.9%"
print SDG_Targets_Hit_rate

false = indicator_mapped[indicator_mapped==False].count()
true = indicator_mapped[indicator_mapped==True].count()
SDG_Indicator_Hit_rate = true.sum()/float(false.sum())
print "hit rate SDG_Indicators: 0.5%"
print SDG_Indicator_Hit_rate

#compare mapping function with excel entries and identify most mentioned goal/target/indicator/overall according to keywords
#GOALS
sdg_mapped['sum_python'] = sdg_mapped.sum(axis=1)
compare1 = sdg_mapped[['SDG','sum_python']].copy()
del sdg[0]
del sdg[1]
sdg['sum_excel'] = sdg.sum(axis=1)
compare2 = sdg['sum_excel'].copy()
compare2 = compare2.drop([0], axis=0)
compare2 = compare2.reset_index()
compare2 = compare2.drop(['index'], axis=1)
frames = [compare1, compare2]
goals_total = pd.concat(frames, axis=1)
print goals_total[['sum_python','sum_excel']]
print "Mapping Function for Goals/Targets and Indicators shows more appearances than excel sheet indicated"

#Targets
target_mapped['sum_python'] = target_mapped.sum(axis=1)
compare3 = target_mapped[['target','sum_python']].copy()
del target[0]
del target[1]
del target[2]
target['sum_excel'] = target.sum(axis=1)
compare4 = target['sum_excel'].copy()
compare4 = compare4.drop([0], axis=0)
compare4 = compare4.reset_index()
compare4 = compare4.drop(['index'], axis=1)
frames = [compare3, compare4]
targets_total = pd.concat(frames, axis=1)
print targets_total[['sum_python','sum_excel']]

#Indicators
indicator_mapped['sum_python'] = indicator_mapped.sum(axis=1)
compare5 = indicator_mapped[['indicator','sum_python']].copy()
del indicator[0]
del indicator[1]
del indicator[2]
del indicator[3]
indicator['sum_excel'] = indicator.sum(axis=1)
compare6 = indicator['sum_excel'].copy()
compare6 = compare6.drop([0], axis=0)
compare6 = compare6.reset_index()
compare6 = compare6.drop(['index'], axis=1)
frames = [compare5, compare6]
indicators_total = pd.concat(frames, axis=1)
print indicators_total[['sum_python','sum_excel']]

#Summary Matches and Comparison to Excel Sheet
print "Mapping Function for Goals/Targets/Indicators shows overall more appearances than excel sheet indicates"
print "Top 3 Goals with keywords Matches: SDG 8 (11 matches), 14 (10 matches), 15 (10 matches)"
print "Top 5 individual Targets with keywords Matches: Target 1.4 (25 matches), 2.3 (31 ma.), 2.4 (25 ma., 6.a (23 ma.), 11.b (27 ma.)"
print "Top indivual Indicators: 1.3.1 (19 ma.), 3.81. (18 ma.), 4.7.1 (21 ma.), 7.b.1 (18 ma.), 11.4.1 (18 ma.), 12.8.1 (19 ma.), 13.b.1 (20 ma.)R"

print "Goal 1 has 1 match for itself, 85 matches for its targets and 115 matches for its indicators. How weight? Weight at all? I need df that assigns goals properly!"
print "If Goal 1 has accumulated 201 matches, is it more or less worth than 300 matches for goal 2 with differen keywords, do I have to weight keywords?"
